-- MySQL dump 10.13  Distrib 8.0.29, for Win64 (x86_64)
--
-- Host: 127.0.0.1    Database: gs_config
-- ------------------------------------------------------
-- Server version	8.0.29

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `config_info`
--
create schema gs_config collate utf8mb4_0900_ai_ci;
use gs_config;

DROP TABLE IF EXISTS `config_info`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `config_info` (
                               `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
                               `data_id` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
                               `group_id` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT NULL,
                               `content` longtext CHARACTER SET utf8mb3 COLLATE utf8_bin NOT NULL COMMENT 'content',
                               `md5` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT NULL COMMENT 'md5',
                               `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
                               `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
                               `src_user` text CHARACTER SET utf8mb3 COLLATE utf8_bin COMMENT 'source user',
                               `src_ip` varchar(50) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT NULL COMMENT 'source ip',
                               `app_name` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT NULL,
                               `tenant_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
                               `c_desc` varchar(256) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT NULL,
                               `c_use` varchar(64) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT NULL,
                               `effect` varchar(64) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT NULL,
                               `type` varchar(64) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT NULL,
                               `c_schema` text CHARACTER SET utf8mb3 COLLATE utf8_bin,
                               PRIMARY KEY (`id`),
                               UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='config_info';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `config_info`
--

LOCK TABLES `config_info` WRITE;
/*!40000 ALTER TABLE `config_info` DISABLE KEYS */;
INSERT INTO `config_info` VALUES (10,'service.vgroupMapping.my_test_tx_group','SEATA_GROUP','default','c21f969b5f03d33d43e04f8f136e7682','2022-06-04 03:27:39','2022-06-04 03:27:39',NULL,'172.18.0.1','','',NULL,NULL,NULL,'text',NULL),(11,'store.mode','SEATA_GROUP','file','8c7dd922ad47494fc02c388e12c00eac','2022-06-04 03:27:39','2022-06-04 03:27:39',NULL,'172.18.0.1','','',NULL,NULL,NULL,'text',NULL),(12,'metrics.enabled','SEATA_GROUP','true','b326b5062b2f0e69046810717534cb09','2022-06-04 03:27:39','2022-06-04 03:27:39',NULL,'172.18.0.1','','',NULL,NULL,NULL,'text',NULL),(13,'metrics.registryType','SEATA_GROUP','compact','7cf74ca49c304df8150205fc915cd465','2022-06-04 03:27:39','2022-06-04 03:27:39',NULL,'172.18.0.1','','',NULL,NULL,NULL,'text',NULL),(14,'metrics.exporterList','SEATA_GROUP','prometheus','e4f00638b8a10e6994e67af2f832d51c','2022-06-04 03:27:39','2022-06-04 03:27:39',NULL,'172.18.0.1','','',NULL,NULL,NULL,'text',NULL),(15,'metrics.exporterPrometheusPort','SEATA_GROUP','9898','7b9dc501afe4ee11c56a4831e20cee71','2022-06-04 03:27:39','2022-06-04 03:27:39',NULL,'172.18.0.1','','',NULL,NULL,NULL,'text',NULL),(16,'client.rm.lock.retryPolicyBranchRollbackOnConflict','SEATA_GROUP','false','68934a3e9455fa72420237eb05902327','2022-06-04 03:27:39','2022-06-04 03:27:39',NULL,'172.18.0.1','','',NULL,NULL,NULL,'text',NULL),(17,'client.rm.lock.retryInterval','SEATA_GROUP','1000','a9b7ba70783b617e9998dc4dd82eb3c5','2022-06-04 03:27:39','2022-06-04 03:27:39',NULL,'172.18.0.1','','',NULL,NULL,NULL,'text',NULL),(18,'client.rm.lock.retryTimes','SEATA_GROUP','30','34173cb38f07f89ddbebc2ac9128303f','2022-06-04 03:27:39','2022-06-04 03:27:39',NULL,'172.18.0.1','','',NULL,NULL,NULL,'text',NULL);
/*!40000 ALTER TABLE `config_info` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `config_info_aggr`
--

DROP TABLE IF EXISTS `config_info_aggr`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `config_info_aggr` (
                                    `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
                                    `data_id` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
                                    `group_id` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
                                    `datum_id` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8_bin NOT NULL COMMENT 'datum_id',
                                    `content` longtext CHARACTER SET utf8mb3 COLLATE utf8_bin NOT NULL COMMENT '内容',
                                    `gmt_modified` datetime NOT NULL COMMENT '修改时间',
                                    `app_name` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT NULL,
                                    `tenant_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
                                    PRIMARY KEY (`id`),
                                    UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='增加租户字段';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `config_info_aggr`
--

LOCK TABLES `config_info_aggr` WRITE;
/*!40000 ALTER TABLE `config_info_aggr` DISABLE KEYS */;
/*!40000 ALTER TABLE `config_info_aggr` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `config_info_beta`
--

DROP TABLE IF EXISTS `config_info_beta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `config_info_beta` (
                                    `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
                                    `data_id` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
                                    `group_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
                                    `app_name` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT NULL COMMENT 'app_name',
                                    `content` longtext CHARACTER SET utf8mb3 COLLATE utf8_bin NOT NULL COMMENT 'content',
                                    `beta_ips` varchar(1024) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT NULL COMMENT 'betaIps',
                                    `md5` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT NULL COMMENT 'md5',
                                    `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
                                    `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
                                    `src_user` text CHARACTER SET utf8mb3 COLLATE utf8_bin COMMENT 'source user',
                                    `src_ip` varchar(50) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT NULL COMMENT 'source ip',
                                    `tenant_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
                                    PRIMARY KEY (`id`),
                                    UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='config_info_beta';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `config_info_beta`
--

LOCK TABLES `config_info_beta` WRITE;
/*!40000 ALTER TABLE `config_info_beta` DISABLE KEYS */;
/*!40000 ALTER TABLE `config_info_beta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `config_info_tag`
--

DROP TABLE IF EXISTS `config_info_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `config_info_tag` (
                                   `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
                                   `data_id` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
                                   `group_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
                                   `tenant_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_id',
                                   `tag_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8_bin NOT NULL COMMENT 'tag_id',
                                   `app_name` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT NULL COMMENT 'app_name',
                                   `content` longtext CHARACTER SET utf8mb3 COLLATE utf8_bin NOT NULL COMMENT 'content',
                                   `md5` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT NULL COMMENT 'md5',
                                   `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
                                   `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
                                   `src_user` text CHARACTER SET utf8mb3 COLLATE utf8_bin COMMENT 'source user',
                                   `src_ip` varchar(50) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT NULL COMMENT 'source ip',
                                   PRIMARY KEY (`id`),
                                   UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='config_info_tag';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `config_info_tag`
--

LOCK TABLES `config_info_tag` WRITE;
/*!40000 ALTER TABLE `config_info_tag` DISABLE KEYS */;
/*!40000 ALTER TABLE `config_info_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `config_tags_relation`
--

DROP TABLE IF EXISTS `config_tags_relation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `config_tags_relation` (
                                        `id` bigint NOT NULL COMMENT 'id',
                                        `tag_name` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8_bin NOT NULL COMMENT 'tag_name',
                                        `tag_type` varchar(64) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT NULL COMMENT 'tag_type',
                                        `data_id` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
                                        `group_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
                                        `tenant_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_id',
                                        `nid` bigint NOT NULL AUTO_INCREMENT,
                                        PRIMARY KEY (`nid`),
                                        UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),
                                        KEY `idx_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='config_tag_relation';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `config_tags_relation`
--

LOCK TABLES `config_tags_relation` WRITE;
/*!40000 ALTER TABLE `config_tags_relation` DISABLE KEYS */;
/*!40000 ALTER TABLE `config_tags_relation` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `group_capacity`
--

DROP TABLE IF EXISTS `group_capacity`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `group_capacity` (
                                  `id` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
                                  `group_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT 'Group ID，空字符表示整个集群',
                                  `quota` int unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',
                                  `usage` int unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
                                  `max_size` int unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
                                  `max_aggr_count` int unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数，，0表示使用默认值',
                                  `max_aggr_size` int unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
                                  `max_history_count` int unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',
                                  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
                                  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
                                  PRIMARY KEY (`id`),
                                  UNIQUE KEY `uk_group_id` (`group_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='集群、各Group容量信息表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `group_capacity`
--

LOCK TABLES `group_capacity` WRITE;
/*!40000 ALTER TABLE `group_capacity` DISABLE KEYS */;
/*!40000 ALTER TABLE `group_capacity` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `his_config_info`
--

DROP TABLE IF EXISTS `his_config_info`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `his_config_info` (
                                   `id` bigint unsigned NOT NULL,
                                   `nid` bigint unsigned NOT NULL AUTO_INCREMENT,
                                   `data_id` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8_bin NOT NULL,
                                   `group_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8_bin NOT NULL,
                                   `app_name` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT NULL COMMENT 'app_name',
                                   `content` longtext CHARACTER SET utf8mb3 COLLATE utf8_bin NOT NULL,
                                   `md5` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT NULL,
                                   `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
                                   `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
                                   `src_user` text CHARACTER SET utf8mb3 COLLATE utf8_bin,
                                   `src_ip` varchar(50) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT NULL,
                                   `op_type` char(10) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT NULL,
                                   `tenant_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
                                   PRIMARY KEY (`nid`),
                                   KEY `idx_gmt_create` (`gmt_create`),
                                   KEY `idx_gmt_modified` (`gmt_modified`),
                                   KEY `idx_did` (`data_id`)
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='多租户改造';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `his_config_info`
--

LOCK TABLES `his_config_info` WRITE;
/*!40000 ALTER TABLE `his_config_info` DISABLE KEYS */;
INSERT INTO `his_config_info` VALUES (0,1,'3432','DEFAULT_GROUP','','33','182be0c5cdcd5072bb1864cdee4d3d6e','2022-06-04 02:57:01','2022-06-04 02:57:02',NULL,'172.18.0.1','I',''),(1,2,'3432','DEFAULT_GROUP','','33','182be0c5cdcd5072bb1864cdee4d3d6e','2022-06-04 02:57:06','2022-06-04 02:57:07',NULL,'172.18.0.1','D',''),(0,3,'goodskill-web-dev','DEFAULT_GROUP','','spring:\r\n  profiles:\r\n    active: dev\r\n  application:\r\n    name: goodskill-web\r\n  #OAuth2.0第三方登录配置\r\n  security:\r\n    oauth2:\r\n      client:\r\n        registration:\r\n          gitee:\r\n            ##替换成你自己的App密钥\r\n            client-id: xxx\r\n            client-secret: xxx\r\n          github:\r\n            ##替换成你自己的App密钥\r\n            client-id: xxx\r\n            client-secret: xxx\r\n          ## 使用自定义的OAuth2.0授权登录服务\r\n          goodskill:\r\n            ##替换成你自己的App密钥\r\n            client-id: second-client\r\n            client-secret: noonewilleverguess\r\n  session:\r\n    redis:\r\n      flush-mode: on_save\r\n      namespace: spring:session\r\n    store-type: redis\r\n    timeout: 1800\r\n  main:\r\n    allow-bean-definition-overriding: true\r\n    allow-circular-references: true\r\n  mvc:\r\n    view:\r\n      prefix: /WEB-INF/jsp/\r\n      suffix: .jsp\r\n    # json格式请求前台到后台的格式转换\r\n    format:\r\n      date: yyyy-MM-dd HH:mm:ss\r\n      date-time: yyyy-MM-dd HH:mm:ss\r\n      time: HH:mm:ss\r\n    # 升级到springboot 2.6需要增加以下配置，否则springfox启动报错\r\n    pathmatch:\r\n      matching-strategy: ant_path_matcher\r\n  output:\r\n    ansi:\r\n      enabled: always\r\n  rabbitmq:\r\n    host: localhost\r\n    port: 5672\r\n    username: guest\r\n    password: guest\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        metadata:\r\n          management:\r\n            ##配置元数据解决SpringBoot Admin无法正常监控问题\r\n            context-path: ${server.servlet.context-path}/actuator\r\n    function:\r\n      ##多个用;分隔\r\n      definition: seckillResult;seckillCanalResult\r\n    stream:\r\n      bindings:\r\n        ##配置消息绑定\r\n        seckill-out-0:\r\n          destination: seckill\r\n        seckillResult-in-0:\r\n          ##解决重复消费问题，注意：同一组下只消费一次\r\n          group: default\r\n          destination: seckill-result\r\n        seckillCanalResult-in-0:\r\n          ##解决重复消费问题，注意：同一组下只消费一次\r\n          group: default\r\n          destination: seckill-canal-result\r\n    sentinel:\r\n      transport:\r\n        port: 8719\r\n        ##默认端口8080，已改为自定义18088端口，通过http://127.0.0.1:18088/#/dashboard访问\r\n        dashboard: localhost:18088\r\n      ##使用nacos配置中心存储限流规则\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            data-id: ${spring.application.name}-flow-rules\r\n            data-type: json\r\n            group-id: DEFAULT_GROUP\r\n            rule-type: flow\r\n            server-addr: 127.0.0.1:8848\r\n\r\ndubbo:\r\n  protocol:\r\n    name: dubbo\r\n    port: -1\r\n  consumer:\r\n    timeout: 30000\r\n    check: false\r\n  application:\r\n    enable-file-cache: false\r\n  ## 此处有坑，如配置了具体的service名，对应的注入此service上的注解@DubboReference(check=false)会失效\r\n#  cloud:\r\n#    subscribed-services: \"goodskill-service-provider\"\r\n\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n  endpoint:\r\n    health:\r\n      show-details: always\r\n\r\ngoodskill:\r\n  loginUrl: ${goodskill.gateway.host}${server.servlet.context-path}/login\r\n  gateway:\r\n    host: http://www.goodskill.com:${server.port}\r\n\r\nserver:\r\n  port: 8080\r\n  servlet:\r\n    context-path: /goodskill/web\r\n    encoding:\r\n      charset: utf-8\r\n      enabled: true\r\n      force: true\r\n    register-default-servlet: true\r\n\r\n---\r\nspring:\r\n  config:\r\n    activate:\r\n      on-profile: docker,dev\r\n  redis:\r\n    host: redis\r\n    port: 6379\r\n    password: 123456\r\n  cloud:\r\n    nacos:\r\n      server-addr: nacos:8848\r\n    sentinel:\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            server-addr: nacos:8848\r\n  kafka:\r\n    bootstrap-servers: kafka:9092\r\n  rabbitmq:\r\n    host: rabbitmq\r\n    port: 5672\r\n    username: guest\r\n    password: guest\r\n  zipkin:\r\n    base-url: http://zipkin:9411/\r\ndubbo:\r\n  registry:\r\n    address: zookeeper://zookeeper:2181\r\n\r\n\r\n','fd1645b0612a0daee194b83b68faf3c1','2022-06-04 02:57:43','2022-06-04 02:57:44',NULL,'172.18.0.1','I',''),(0,4,'goodskill-web-dev.yml','DEFAULT_GROUP','','spring:\r\n  profiles:\r\n    active: dev\r\n  application:\r\n    name: goodskill-web\r\n  #OAuth2.0第三方登录配置\r\n  security:\r\n    oauth2:\r\n      client:\r\n        registration:\r\n          gitee:\r\n            ##替换成你自己的App密钥\r\n            client-id: xxx\r\n            client-secret: xxx\r\n          github:\r\n            ##替换成你自己的App密钥\r\n            client-id: xxx\r\n            client-secret: xxx\r\n          ## 使用自定义的OAuth2.0授权登录服务\r\n          goodskill:\r\n            ##替换成你自己的App密钥\r\n            client-id: second-client\r\n            client-secret: noonewilleverguess\r\n  session:\r\n    redis:\r\n      flush-mode: on_save\r\n      namespace: spring:session\r\n    store-type: redis\r\n    timeout: 1800\r\n  main:\r\n    allow-bean-definition-overriding: true\r\n    allow-circular-references: true\r\n  mvc:\r\n    view:\r\n      prefix: /WEB-INF/jsp/\r\n      suffix: .jsp\r\n    # json格式请求前台到后台的格式转换\r\n    format:\r\n      date: yyyy-MM-dd HH:mm:ss\r\n      date-time: yyyy-MM-dd HH:mm:ss\r\n      time: HH:mm:ss\r\n    # 升级到springboot 2.6需要增加以下配置，否则springfox启动报错\r\n    pathmatch:\r\n      matching-strategy: ant_path_matcher\r\n  output:\r\n    ansi:\r\n      enabled: always\r\n  rabbitmq:\r\n    host: localhost\r\n    port: 5672\r\n    username: guest\r\n    password: guest\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        metadata:\r\n          management:\r\n            ##配置元数据解决SpringBoot Admin无法正常监控问题\r\n            context-path: ${server.servlet.context-path}/actuator\r\n    function:\r\n      ##多个用;分隔\r\n      definition: seckillResult;seckillCanalResult\r\n    stream:\r\n      bindings:\r\n        ##配置消息绑定\r\n        seckill-out-0:\r\n          destination: seckill\r\n        seckillResult-in-0:\r\n          ##解决重复消费问题，注意：同一组下只消费一次\r\n          group: default\r\n          destination: seckill-result\r\n        seckillCanalResult-in-0:\r\n          ##解决重复消费问题，注意：同一组下只消费一次\r\n          group: default\r\n          destination: seckill-canal-result\r\n    sentinel:\r\n      transport:\r\n        port: 8719\r\n        ##默认端口8080，已改为自定义18088端口，通过http://127.0.0.1:18088/#/dashboard访问\r\n        dashboard: localhost:18088\r\n      ##使用nacos配置中心存储限流规则\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            data-id: ${spring.application.name}-flow-rules\r\n            data-type: json\r\n            group-id: DEFAULT_GROUP\r\n            rule-type: flow\r\n            server-addr: 127.0.0.1:8848\r\n\r\ndubbo:\r\n  protocol:\r\n    name: dubbo\r\n    port: -1\r\n  consumer:\r\n    timeout: 30000\r\n    check: false\r\n  application:\r\n    enable-file-cache: false\r\n  ## 此处有坑，如配置了具体的service名，对应的注入此service上的注解@DubboReference(check=false)会失效\r\n#  cloud:\r\n#    subscribed-services: \"goodskill-service-provider\"\r\n\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n  endpoint:\r\n    health:\r\n      show-details: always\r\n\r\ngoodskill:\r\n  loginUrl: ${goodskill.gateway.host}${server.servlet.context-path}/login\r\n  gateway:\r\n    host: http://www.goodskill.com:${server.port}\r\n\r\nserver:\r\n  port: 8080\r\n  servlet:\r\n    context-path: /goodskill/web\r\n    encoding:\r\n      charset: utf-8\r\n      enabled: true\r\n      force: true\r\n    register-default-servlet: true\r\n\r\n---\r\nspring:\r\n  config:\r\n    activate:\r\n      on-profile: docker,dev\r\n  redis:\r\n    host: redis\r\n    port: 6379\r\n    password: 123456\r\n  cloud:\r\n    nacos:\r\n      server-addr: nacos:8848\r\n    sentinel:\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            server-addr: nacos:8848\r\n  kafka:\r\n    bootstrap-servers: kafka:9092\r\n  rabbitmq:\r\n    host: rabbitmq\r\n    port: 5672\r\n    username: guest\r\n    password: guest\r\n  zipkin:\r\n    base-url: http://zipkin:9411/\r\ndubbo:\r\n  registry:\r\n    address: zookeeper://zookeeper:2181\r\n\r\n\r\n','fd1645b0612a0daee194b83b68faf3c1','2022-06-04 03:00:08','2022-06-04 03:00:09',NULL,'172.18.0.1','I',''),(0,5,'goodskill-web.yml','DEFAULT_GROUP','','spring:\r\n  profiles:\r\n    active: dev\r\n  application:\r\n    name: goodskill-web\r\n  #OAuth2.0第三方登录配置\r\n  security:\r\n    oauth2:\r\n      client:\r\n        registration:\r\n          gitee:\r\n            ##替换成你自己的App密钥\r\n            client-id: xxx\r\n            client-secret: xxx\r\n          github:\r\n            ##替换成你自己的App密钥\r\n            client-id: xxx\r\n            client-secret: xxx\r\n          ## 使用自定义的OAuth2.0授权登录服务\r\n          goodskill:\r\n            ##替换成你自己的App密钥\r\n            client-id: second-client\r\n            client-secret: noonewilleverguess\r\n  session:\r\n    redis:\r\n      flush-mode: on_save\r\n      namespace: spring:session\r\n    store-type: redis\r\n    timeout: 1800\r\n  main:\r\n    allow-bean-definition-overriding: true\r\n    allow-circular-references: true\r\n  mvc:\r\n    view:\r\n      prefix: /WEB-INF/jsp/\r\n      suffix: .jsp\r\n    # json格式请求前台到后台的格式转换\r\n    format:\r\n      date: yyyy-MM-dd HH:mm:ss\r\n      date-time: yyyy-MM-dd HH:mm:ss\r\n      time: HH:mm:ss\r\n    # 升级到springboot 2.6需要增加以下配置，否则springfox启动报错\r\n    pathmatch:\r\n      matching-strategy: ant_path_matcher\r\n  output:\r\n    ansi:\r\n      enabled: always\r\n  rabbitmq:\r\n    host: localhost\r\n    port: 5672\r\n    username: guest\r\n    password: guest\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        metadata:\r\n          management:\r\n            ##配置元数据解决SpringBoot Admin无法正常监控问题\r\n            context-path: ${server.servlet.context-path}/actuator\r\n    function:\r\n      ##多个用;分隔\r\n      definition: seckillResult;seckillCanalResult\r\n    stream:\r\n      bindings:\r\n        ##配置消息绑定\r\n        seckill-out-0:\r\n          destination: seckill\r\n        seckillResult-in-0:\r\n          ##解决重复消费问题，注意：同一组下只消费一次\r\n          group: default\r\n          destination: seckill-result\r\n        seckillCanalResult-in-0:\r\n          ##解决重复消费问题，注意：同一组下只消费一次\r\n          group: default\r\n          destination: seckill-canal-result\r\n    sentinel:\r\n      transport:\r\n        port: 8719\r\n        ##默认端口8080，已改为自定义18088端口，通过http://127.0.0.1:18088/#/dashboard访问\r\n        dashboard: localhost:18088\r\n      ##使用nacos配置中心存储限流规则\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            data-id: ${spring.application.name}-flow-rules\r\n            data-type: json\r\n            group-id: DEFAULT_GROUP\r\n            rule-type: flow\r\n            server-addr: 127.0.0.1:8848\r\n\r\ndubbo:\r\n  protocol:\r\n    name: dubbo\r\n    port: -1\r\n  consumer:\r\n    timeout: 30000\r\n    check: false\r\n  application:\r\n    enable-file-cache: false\r\n  ## 此处有坑，如配置了具体的service名，对应的注入此service上的注解@DubboReference(check=false)会失效\r\n#  cloud:\r\n#    subscribed-services: \"goodskill-service-provider\"\r\n\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n  endpoint:\r\n    health:\r\n      show-details: always\r\n\r\ngoodskill:\r\n  loginUrl: ${goodskill.gateway.host}${server.servlet.context-path}/login\r\n  gateway:\r\n    host: http://www.goodskill.com:${server.port}\r\n\r\nserver:\r\n  port: 8080\r\n  servlet:\r\n    context-path: /goodskill/web\r\n    encoding:\r\n      charset: utf-8\r\n      enabled: true\r\n      force: true\r\n    register-default-servlet: true\r\n\r\n---\r\nspring:\r\n  config:\r\n    activate:\r\n      on-profile: docker,dev\r\n  redis:\r\n    host: redis\r\n    port: 6379\r\n    password: 123456\r\n  cloud:\r\n    nacos:\r\n      server-addr: nacos:8848\r\n    sentinel:\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            server-addr: nacos:8848\r\n  kafka:\r\n    bootstrap-servers: kafka:9092\r\n  rabbitmq:\r\n    host: rabbitmq\r\n    port: 5672\r\n    username: guest\r\n    password: guest\r\n  zipkin:\r\n    base-url: http://zipkin:9411/\r\ndubbo:\r\n  registry:\r\n    address: zookeeper://zookeeper:2181\r\n\r\n\r\n','fd1645b0612a0daee194b83b68faf3c1','2022-06-04 03:07:58','2022-06-04 03:07:59',NULL,'172.18.0.1','I',''),(0,6,'goodskill-service-provider.yml','DEFAULT_GROUP','','server:\r\n  port: 0\r\n\r\nspring:\r\n  profiles:\r\n    active: dev\r\n  application:\r\n    name: goodskill-service-provider\r\n  kafka:\r\n    consumer:\r\n      group-id: seckill\r\n      ##ensures the new consumer group gets the messages we sent\r\n      auto-offset-reset: earliest\r\n  main:\r\n    allow-circular-references: true\r\n    allow-bean-definition-overriding: true\r\n  output:\r\n    ansi:\r\n      enabled: ALWAYS\r\n  data:\r\n    mongodb:\r\n      database: test\r\n  datasource:\r\n    driver-class-name: com.mysql.cj.jdbc.Driver\r\n    url: jdbc:mysql://mysql:3306/seckill?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false\r\n    username: root\r\n    password: Password123\r\n  shardingsphere:\r\n    datasource:\r\n      names: ds0,ds1\r\n      ds0:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n      ds1:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n    sharding:\r\n      binding-tables: success_killed\r\n      tables:\r\n        success_killed:\r\n          actual-data-nodes: ds$->{0..1}.success_killed_$->{0..1}\r\n          database-strategy:\r\n            inline:\r\n              algorithm-expression: ds$->{seckill_id % 2}\r\n              sharding-column: seckill_id\r\n          table-strategy:\r\n            inline:\r\n              algorithm-expression: success_killed_$->{user_phone.toLong() % 2}\r\n              sharding-column: user_phone\r\n      #必须配置，否则未配置的表会被应用分库分表规则\r\n      default-data-source-name: ds0\r\n    props:\r\n      sql:\r\n        show: false\r\n  rabbitmq:\r\n    port: 5672\r\n    username: guest\r\n    password: guest\r\n  cloud:\r\n    function:\r\n      definition: seckill\r\n    stream:\r\n      bindings:\r\n        seckilResult-out-0:\r\n          destination: seckill-result\r\n        seckill-in-0:\r\n          ##解决重复消费问题，注意：同一组下只消费一次\r\n          group: default\r\n          destination: seckill\r\n        seckillMongoSave-out-0:\r\n          destination: seckill-mongo-save\r\n      default-binder: rabbit\r\n    sentinel:\r\n      transport:\r\n        port: 8719\r\n        ## 默认端口8080，已改为自定义18088端口，通过http://127.0.0.1:18088/#/dashboard访问\r\n        dashboard: localhost:18088\r\n      ##使用nacos配置中心存储限流规则\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            data-id: ${spring.application.name}-flow-rules\r\n            data-type: json\r\n            group-id: DEFAULT_GROUP\r\n            rule-type: flow\r\n            server-addr: 127.0.0.1:8848\r\ndubbo:\r\n  scan:\r\n    base-packages: com.goodskill.service.impl\r\n  protocol:\r\n    name: dubbo\r\n    ### 服务暴露端口\r\n    port: -1\r\n    status: server\r\n  registry:\r\n    address: zookeeper://zookeeper:2181\r\n    timeout: 30000\r\n    id: my-registry\r\n  provider:\r\n    timeout: 60000\r\n  application:\r\n    enable-file-cache: false\r\n    ##开启应用级地址注册\r\n    register-mode: instance\r\n  ## 此处有坑，如配置了具体的service名，对应的注入此service上的注解@DubboReference(check=false)会失效\r\n#  cloud:\r\n#    subscribed-services: \"\"\r\n\r\nmybatis:\r\n  mapper-locations: classpath:mapper/*.xml\r\n\r\nseata:\r\n  enabled: false\r\n  #1.4.2使用此配置禁用seata\r\n  enable-auto-data-source-proxy: false\r\n  application-id: goodskill-service-provider\r\n  tx-service-group: my_test_tx_group\r\n  config:\r\n    type: nacos\r\n    nacos:\r\n      namespace:\r\n      serverAddr: nacos:8848\r\n      group: SEATA_GROUP\r\n      username: \"nacos\"\r\n      password: \"nacos\"\r\n  registry:\r\n    type: nacos\r\n    nacos:\r\n      application: seata-server\r\n      server-addr: nacos:8848\r\n      group: SEATA_GROUP\r\n      namespace:\r\n      username: \"nacos\"\r\n      password: \"nacos\"\r\n\r\nlogging:\r\n  level:\r\n    org:\r\n      apache:\r\n        kafka: error\r\nmanagement:\r\n  endpoint:\r\n    health:\r\n      show-details: always\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n  health:\r\n    db:\r\n      enabled: false\r\n---\r\n######################docker环境配置#####################\r\nspring:\r\n  redis:\r\n    host: redis\r\n    port: 6379\r\n    password: 123456\r\n  ##下面是redis哨兵模式的配置信息\r\n#    redisson:\r\n#      config: |\r\n#        sentinelServersConfig:\r\n#          checkSentinelsList: false\r\n#          masterName: mymaster\r\n#          sentinelAddresses:\r\n#          - \"redis://127.0.0.1:26379\"\r\n#          - \"redis://127.0.0.1:26380\"\r\n#          - \"redis://127.0.0.1:26381\"\r\n#    sentinel:\r\n#      master: mymaster\r\n#      nodes: 127.0.0.1:26379,127.0.0.1:26380,127.0.0.1:26381\r\n  kafka:\r\n    bootstrap-servers: kafka:9092\r\n  shardingsphere:\r\n    datasource:\r\n      ds0:\r\n        password: Password123\r\n        jdbcUrl: jdbc:mysql://mysql:3306/seckill?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false\r\n        username: root\r\n      ds1:\r\n        password: Password123\r\n        jdbcUrl: jdbc:mysql://mysql:3306/seckill_01?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false\r\n        username: root\r\n  cloud:\r\n    nacos:\r\n      server-addr: nacos:8848\r\n    sentinel:\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            server-addr: nacos:8848\r\n  zipkin:\r\n    base-url: http://zipkin:9411/\r\n  rabbitmq:\r\n    host: rabbitmq\r\n    port: 5672\r\n    username: guest\r\n    password: guest\r\n  config:\r\n    activate:\r\n      on-profile: docker,dev\r\ndubbo:\r\n  registry:\r\n    address: zookeeper://zookeeper:2181\r\n  provider:\r\n    timeout: 30000\r\n\r\nzookeeper_ip: zookeeper:2181\r\n\r\n\r\n\r\n\r\n','94e78b515e0619966df59814e551868a','2022-06-04 03:12:02','2022-06-04 03:12:03',NULL,'172.18.0.1','I',''),(0,7,'goodskill-service-provider-dev.yml','DEFAULT_GROUP','','server:\r\n  port: 0\r\n\r\nspring:\r\n  profiles:\r\n    active: dev\r\n  application:\r\n    name: goodskill-service-provider\r\n  kafka:\r\n    consumer:\r\n      group-id: seckill\r\n      ##ensures the new consumer group gets the messages we sent\r\n      auto-offset-reset: earliest\r\n  main:\r\n    allow-circular-references: true\r\n    allow-bean-definition-overriding: true\r\n  output:\r\n    ansi:\r\n      enabled: ALWAYS\r\n  data:\r\n    mongodb:\r\n      database: test\r\n  datasource:\r\n    driver-class-name: com.mysql.cj.jdbc.Driver\r\n    url: jdbc:mysql://mysql:3306/seckill?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false\r\n    username: root\r\n    password: Password123\r\n  shardingsphere:\r\n    datasource:\r\n      names: ds0,ds1\r\n      ds0:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n      ds1:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n    sharding:\r\n      binding-tables: success_killed\r\n      tables:\r\n        success_killed:\r\n          actual-data-nodes: ds$->{0..1}.success_killed_$->{0..1}\r\n          database-strategy:\r\n            inline:\r\n              algorithm-expression: ds$->{seckill_id % 2}\r\n              sharding-column: seckill_id\r\n          table-strategy:\r\n            inline:\r\n              algorithm-expression: success_killed_$->{user_phone.toLong() % 2}\r\n              sharding-column: user_phone\r\n      #必须配置，否则未配置的表会被应用分库分表规则\r\n      default-data-source-name: ds0\r\n    props:\r\n      sql:\r\n        show: false\r\n  rabbitmq:\r\n    port: 5672\r\n    username: guest\r\n    password: guest\r\n  cloud:\r\n    function:\r\n      definition: seckill\r\n    stream:\r\n      bindings:\r\n        seckilResult-out-0:\r\n          destination: seckill-result\r\n        seckill-in-0:\r\n          ##解决重复消费问题，注意：同一组下只消费一次\r\n          group: default\r\n          destination: seckill\r\n        seckillMongoSave-out-0:\r\n          destination: seckill-mongo-save\r\n      default-binder: rabbit\r\n    sentinel:\r\n      transport:\r\n        port: 8719\r\n        ## 默认端口8080，已改为自定义18088端口，通过http://127.0.0.1:18088/#/dashboard访问\r\n        dashboard: localhost:18088\r\n      ##使用nacos配置中心存储限流规则\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            data-id: ${spring.application.name}-flow-rules\r\n            data-type: json\r\n            group-id: DEFAULT_GROUP\r\n            rule-type: flow\r\n            server-addr: 127.0.0.1:8848\r\ndubbo:\r\n  scan:\r\n    base-packages: com.goodskill.service.impl\r\n  protocol:\r\n    name: dubbo\r\n    ### 服务暴露端口\r\n    port: -1\r\n    status: server\r\n  registry:\r\n    address: zookeeper://zookeeper:2181\r\n    timeout: 30000\r\n    id: my-registry\r\n  provider:\r\n    timeout: 60000\r\n  application:\r\n    enable-file-cache: false\r\n    ##开启应用级地址注册\r\n    register-mode: instance\r\n  ## 此处有坑，如配置了具体的service名，对应的注入此service上的注解@DubboReference(check=false)会失效\r\n#  cloud:\r\n#    subscribed-services: \"\"\r\n\r\nmybatis:\r\n  mapper-locations: classpath:mapper/*.xml\r\n\r\nseata:\r\n  enabled: false\r\n  #1.4.2使用此配置禁用seata\r\n  enable-auto-data-source-proxy: false\r\n  application-id: goodskill-service-provider\r\n  tx-service-group: my_test_tx_group\r\n  config:\r\n    type: nacos\r\n    nacos:\r\n      namespace:\r\n      serverAddr: nacos:8848\r\n      group: SEATA_GROUP\r\n      username: \"nacos\"\r\n      password: \"nacos\"\r\n  registry:\r\n    type: nacos\r\n    nacos:\r\n      application: seata-server\r\n      server-addr: nacos:8848\r\n      group: SEATA_GROUP\r\n      namespace:\r\n      username: \"nacos\"\r\n      password: \"nacos\"\r\n\r\nlogging:\r\n  level:\r\n    org:\r\n      apache:\r\n        kafka: error\r\nmanagement:\r\n  endpoint:\r\n    health:\r\n      show-details: always\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n  health:\r\n    db:\r\n      enabled: false\r\n---\r\n######################docker环境配置#####################\r\nspring:\r\n  redis:\r\n    host: redis\r\n    port: 6379\r\n    password: 123456\r\n  ##下面是redis哨兵模式的配置信息\r\n#    redisson:\r\n#      config: |\r\n#        sentinelServersConfig:\r\n#          checkSentinelsList: false\r\n#          masterName: mymaster\r\n#          sentinelAddresses:\r\n#          - \"redis://127.0.0.1:26379\"\r\n#          - \"redis://127.0.0.1:26380\"\r\n#          - \"redis://127.0.0.1:26381\"\r\n#    sentinel:\r\n#      master: mymaster\r\n#      nodes: 127.0.0.1:26379,127.0.0.1:26380,127.0.0.1:26381\r\n  kafka:\r\n    bootstrap-servers: kafka:9092\r\n  shardingsphere:\r\n    datasource:\r\n      ds0:\r\n        password: Password123\r\n        jdbcUrl: jdbc:mysql://mysql:3306/seckill?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false\r\n        username: root\r\n      ds1:\r\n        password: Password123\r\n        jdbcUrl: jdbc:mysql://mysql:3306/seckill_01?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false\r\n        username: root\r\n  cloud:\r\n    nacos:\r\n      server-addr: nacos:8848\r\n    sentinel:\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            server-addr: nacos:8848\r\n  zipkin:\r\n    base-url: http://zipkin:9411/\r\n  rabbitmq:\r\n    host: rabbitmq\r\n    port: 5672\r\n    username: guest\r\n    password: guest\r\n  config:\r\n    activate:\r\n      on-profile: docker,dev\r\ndubbo:\r\n  registry:\r\n    address: zookeeper://zookeeper:2181\r\n  provider:\r\n    timeout: 30000\r\n\r\nzookeeper_ip: zookeeper:2181\r\n\r\n\r\n\r\n\r\n','94e78b515e0619966df59814e551868a','2022-06-04 03:14:21','2022-06-04 03:14:22',NULL,'172.18.0.1','I',''),(6,8,'goodskill-service-provider-dev.yml','DEFAULT_GROUP','','server:\r\n  port: 0\r\n\r\nspring:\r\n  profiles:\r\n    active: dev\r\n  application:\r\n    name: goodskill-service-provider\r\n  kafka:\r\n    consumer:\r\n      group-id: seckill\r\n      ##ensures the new consumer group gets the messages we sent\r\n      auto-offset-reset: earliest\r\n  main:\r\n    allow-circular-references: true\r\n    allow-bean-definition-overriding: true\r\n  output:\r\n    ansi:\r\n      enabled: ALWAYS\r\n  data:\r\n    mongodb:\r\n      database: test\r\n  datasource:\r\n    driver-class-name: com.mysql.cj.jdbc.Driver\r\n    url: jdbc:mysql://mysql:3306/seckill?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false\r\n    username: root\r\n    password: Password123\r\n  shardingsphere:\r\n    datasource:\r\n      names: ds0,ds1\r\n      ds0:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n      ds1:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n    sharding:\r\n      binding-tables: success_killed\r\n      tables:\r\n        success_killed:\r\n          actual-data-nodes: ds$->{0..1}.success_killed_$->{0..1}\r\n          database-strategy:\r\n            inline:\r\n              algorithm-expression: ds$->{seckill_id % 2}\r\n              sharding-column: seckill_id\r\n          table-strategy:\r\n            inline:\r\n              algorithm-expression: success_killed_$->{user_phone.toLong() % 2}\r\n              sharding-column: user_phone\r\n      #必须配置，否则未配置的表会被应用分库分表规则\r\n      default-data-source-name: ds0\r\n    props:\r\n      sql:\r\n        show: false\r\n  rabbitmq:\r\n    port: 5672\r\n    username: guest\r\n    password: guest\r\n  cloud:\r\n    function:\r\n      definition: seckill\r\n    stream:\r\n      bindings:\r\n        seckilResult-out-0:\r\n          destination: seckill-result\r\n        seckill-in-0:\r\n          ##解决重复消费问题，注意：同一组下只消费一次\r\n          group: default\r\n          destination: seckill\r\n        seckillMongoSave-out-0:\r\n          destination: seckill-mongo-save\r\n      default-binder: rabbit\r\n    sentinel:\r\n      transport:\r\n        port: 8719\r\n        ## 默认端口8080，已改为自定义18088端口，通过http://127.0.0.1:18088/#/dashboard访问\r\n        dashboard: localhost:18088\r\n      ##使用nacos配置中心存储限流规则\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            data-id: ${spring.application.name}-flow-rules\r\n            data-type: json\r\n            group-id: DEFAULT_GROUP\r\n            rule-type: flow\r\n            server-addr: 127.0.0.1:8848\r\ndubbo:\r\n  scan:\r\n    base-packages: com.goodskill.service.impl\r\n  protocol:\r\n    name: dubbo\r\n    ### 服务暴露端口\r\n    port: -1\r\n    status: server\r\n  registry:\r\n    address: zookeeper://zookeeper:2181\r\n    timeout: 30000\r\n    id: my-registry\r\n  provider:\r\n    timeout: 60000\r\n  application:\r\n    enable-file-cache: false\r\n    ##开启应用级地址注册\r\n    register-mode: instance\r\n  ## 此处有坑，如配置了具体的service名，对应的注入此service上的注解@DubboReference(check=false)会失效\r\n#  cloud:\r\n#    subscribed-services: \"\"\r\n\r\nmybatis:\r\n  mapper-locations: classpath:mapper/*.xml\r\n\r\nseata:\r\n  enabled: false\r\n  #1.4.2使用此配置禁用seata\r\n  enable-auto-data-source-proxy: false\r\n  application-id: goodskill-service-provider\r\n  tx-service-group: my_test_tx_group\r\n  config:\r\n    type: nacos\r\n    nacos:\r\n      namespace:\r\n      serverAddr: nacos:8848\r\n      group: SEATA_GROUP\r\n      username: \"nacos\"\r\n      password: \"nacos\"\r\n  registry:\r\n    type: nacos\r\n    nacos:\r\n      application: seata-server\r\n      server-addr: nacos:8848\r\n      group: SEATA_GROUP\r\n      namespace:\r\n      username: \"nacos\"\r\n      password: \"nacos\"\r\n\r\nlogging:\r\n  level:\r\n    org:\r\n      apache:\r\n        kafka: error\r\nmanagement:\r\n  endpoint:\r\n    health:\r\n      show-details: always\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n  health:\r\n    db:\r\n      enabled: false\r\n---\r\n######################docker环境配置#####################\r\nspring:\r\n  redis:\r\n    host: redis\r\n    port: 6379\r\n    password: 123456\r\n  ##下面是redis哨兵模式的配置信息\r\n#    redisson:\r\n#      config: |\r\n#        sentinelServersConfig:\r\n#          checkSentinelsList: false\r\n#          masterName: mymaster\r\n#          sentinelAddresses:\r\n#          - \"redis://127.0.0.1:26379\"\r\n#          - \"redis://127.0.0.1:26380\"\r\n#          - \"redis://127.0.0.1:26381\"\r\n#    sentinel:\r\n#      master: mymaster\r\n#      nodes: 127.0.0.1:26379,127.0.0.1:26380,127.0.0.1:26381\r\n  kafka:\r\n    bootstrap-servers: kafka:9092\r\n  shardingsphere:\r\n    datasource:\r\n      ds0:\r\n        password: Password123\r\n        jdbcUrl: jdbc:mysql://mysql:3306/seckill?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false\r\n        username: root\r\n      ds1:\r\n        password: Password123\r\n        jdbcUrl: jdbc:mysql://mysql:3306/seckill_01?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false\r\n        username: root\r\n  cloud:\r\n    nacos:\r\n      server-addr: nacos:8848\r\n    sentinel:\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            server-addr: nacos:8848\r\n  zipkin:\r\n    base-url: http://zipkin:9411/\r\n  rabbitmq:\r\n    host: rabbitmq\r\n    port: 5672\r\n    username: guest\r\n    password: guest\r\n  config:\r\n    activate:\r\n      on-profile: docker,dev\r\ndubbo:\r\n  registry:\r\n    address: zookeeper://zookeeper:2181\r\n  provider:\r\n    timeout: 30000\r\n\r\nzookeeper_ip: zookeeper:2181\r\n\r\n\r\n\r\n\r\n','94e78b515e0619966df59814e551868a','2022-06-04 03:15:20','2022-06-04 03:15:20','nacos','172.18.0.1','U',''),(5,9,'goodskill-service-provider.yml','DEFAULT_GROUP','','server:\r\n  port: 0\r\n\r\nspring:\r\n  profiles:\r\n    active: dev\r\n  application:\r\n    name: goodskill-service-provider\r\n  kafka:\r\n    consumer:\r\n      group-id: seckill\r\n      ##ensures the new consumer group gets the messages we sent\r\n      auto-offset-reset: earliest\r\n  main:\r\n    allow-circular-references: true\r\n    allow-bean-definition-overriding: true\r\n  output:\r\n    ansi:\r\n      enabled: ALWAYS\r\n  data:\r\n    mongodb:\r\n      database: test\r\n  datasource:\r\n    driver-class-name: com.mysql.cj.jdbc.Driver\r\n    url: jdbc:mysql://mysql:3306/seckill?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false\r\n    username: root\r\n    password: Password123\r\n  shardingsphere:\r\n    datasource:\r\n      names: ds0,ds1\r\n      ds0:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n      ds1:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n    sharding:\r\n      binding-tables: success_killed\r\n      tables:\r\n        success_killed:\r\n          actual-data-nodes: ds$->{0..1}.success_killed_$->{0..1}\r\n          database-strategy:\r\n            inline:\r\n              algorithm-expression: ds$->{seckill_id % 2}\r\n              sharding-column: seckill_id\r\n          table-strategy:\r\n            inline:\r\n              algorithm-expression: success_killed_$->{user_phone.toLong() % 2}\r\n              sharding-column: user_phone\r\n      #必须配置，否则未配置的表会被应用分库分表规则\r\n      default-data-source-name: ds0\r\n    props:\r\n      sql:\r\n        show: false\r\n  rabbitmq:\r\n    port: 5672\r\n    username: guest\r\n    password: guest\r\n  cloud:\r\n    function:\r\n      definition: seckill\r\n    stream:\r\n      bindings:\r\n        seckilResult-out-0:\r\n          destination: seckill-result\r\n        seckill-in-0:\r\n          ##解决重复消费问题，注意：同一组下只消费一次\r\n          group: default\r\n          destination: seckill\r\n        seckillMongoSave-out-0:\r\n          destination: seckill-mongo-save\r\n      default-binder: rabbit\r\n    sentinel:\r\n      transport:\r\n        port: 8719\r\n        ## 默认端口8080，已改为自定义18088端口，通过http://127.0.0.1:18088/#/dashboard访问\r\n        dashboard: localhost:18088\r\n      ##使用nacos配置中心存储限流规则\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            data-id: ${spring.application.name}-flow-rules\r\n            data-type: json\r\n            group-id: DEFAULT_GROUP\r\n            rule-type: flow\r\n            server-addr: 127.0.0.1:8848\r\ndubbo:\r\n  scan:\r\n    base-packages: com.goodskill.service.impl\r\n  protocol:\r\n    name: dubbo\r\n    ### 服务暴露端口\r\n    port: -1\r\n    status: server\r\n  registry:\r\n    address: zookeeper://zookeeper:2181\r\n    timeout: 30000\r\n    id: my-registry\r\n  provider:\r\n    timeout: 60000\r\n  application:\r\n    enable-file-cache: false\r\n    ##开启应用级地址注册\r\n    register-mode: instance\r\n  ## 此处有坑，如配置了具体的service名，对应的注入此service上的注解@DubboReference(check=false)会失效\r\n#  cloud:\r\n#    subscribed-services: \"\"\r\n\r\nmybatis:\r\n  mapper-locations: classpath:mapper/*.xml\r\n\r\nseata:\r\n  enabled: false\r\n  #1.4.2使用此配置禁用seata\r\n  enable-auto-data-source-proxy: false\r\n  application-id: goodskill-service-provider\r\n  tx-service-group: my_test_tx_group\r\n  config:\r\n    type: nacos\r\n    nacos:\r\n      namespace:\r\n      serverAddr: nacos:8848\r\n      group: SEATA_GROUP\r\n      username: \"nacos\"\r\n      password: \"nacos\"\r\n  registry:\r\n    type: nacos\r\n    nacos:\r\n      application: seata-server\r\n      server-addr: nacos:8848\r\n      group: SEATA_GROUP\r\n      namespace:\r\n      username: \"nacos\"\r\n      password: \"nacos\"\r\n\r\nlogging:\r\n  level:\r\n    org:\r\n      apache:\r\n        kafka: error\r\nmanagement:\r\n  endpoint:\r\n    health:\r\n      show-details: always\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n  health:\r\n    db:\r\n      enabled: false\r\n---\r\n######################docker环境配置#####################\r\nspring:\r\n  redis:\r\n    host: redis\r\n    port: 6379\r\n    password: 123456\r\n  ##下面是redis哨兵模式的配置信息\r\n#    redisson:\r\n#      config: |\r\n#        sentinelServersConfig:\r\n#          checkSentinelsList: false\r\n#          masterName: mymaster\r\n#          sentinelAddresses:\r\n#          - \"redis://127.0.0.1:26379\"\r\n#          - \"redis://127.0.0.1:26380\"\r\n#          - \"redis://127.0.0.1:26381\"\r\n#    sentinel:\r\n#      master: mymaster\r\n#      nodes: 127.0.0.1:26379,127.0.0.1:26380,127.0.0.1:26381\r\n  kafka:\r\n    bootstrap-servers: kafka:9092\r\n  shardingsphere:\r\n    datasource:\r\n      ds0:\r\n        password: Password123\r\n        jdbcUrl: jdbc:mysql://mysql:3306/seckill?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false\r\n        username: root\r\n      ds1:\r\n        password: Password123\r\n        jdbcUrl: jdbc:mysql://mysql:3306/seckill_01?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false\r\n        username: root\r\n  cloud:\r\n    nacos:\r\n      server-addr: nacos:8848\r\n    sentinel:\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            server-addr: nacos:8848\r\n  zipkin:\r\n    base-url: http://zipkin:9411/\r\n  rabbitmq:\r\n    host: rabbitmq\r\n    port: 5672\r\n    username: guest\r\n    password: guest\r\n  config:\r\n    activate:\r\n      on-profile: docker,dev\r\ndubbo:\r\n  registry:\r\n    address: zookeeper://zookeeper:2181\r\n  provider:\r\n    timeout: 30000\r\n\r\nzookeeper_ip: zookeeper:2181\r\n\r\n\r\n\r\n\r\n','94e78b515e0619966df59814e551868a','2022-06-04 03:19:02','2022-06-04 03:19:03',NULL,'172.18.0.1','D',''),(2,10,'goodskill-web-dev','DEFAULT_GROUP','','spring:\r\n  profiles:\r\n    active: dev\r\n  application:\r\n    name: goodskill-web\r\n  #OAuth2.0第三方登录配置\r\n  security:\r\n    oauth2:\r\n      client:\r\n        registration:\r\n          gitee:\r\n            ##替换成你自己的App密钥\r\n            client-id: xxx\r\n            client-secret: xxx\r\n          github:\r\n            ##替换成你自己的App密钥\r\n            client-id: xxx\r\n            client-secret: xxx\r\n          ## 使用自定义的OAuth2.0授权登录服务\r\n          goodskill:\r\n            ##替换成你自己的App密钥\r\n            client-id: second-client\r\n            client-secret: noonewilleverguess\r\n  session:\r\n    redis:\r\n      flush-mode: on_save\r\n      namespace: spring:session\r\n    store-type: redis\r\n    timeout: 1800\r\n  main:\r\n    allow-bean-definition-overriding: true\r\n    allow-circular-references: true\r\n  mvc:\r\n    view:\r\n      prefix: /WEB-INF/jsp/\r\n      suffix: .jsp\r\n    # json格式请求前台到后台的格式转换\r\n    format:\r\n      date: yyyy-MM-dd HH:mm:ss\r\n      date-time: yyyy-MM-dd HH:mm:ss\r\n      time: HH:mm:ss\r\n    # 升级到springboot 2.6需要增加以下配置，否则springfox启动报错\r\n    pathmatch:\r\n      matching-strategy: ant_path_matcher\r\n  output:\r\n    ansi:\r\n      enabled: always\r\n  rabbitmq:\r\n    host: localhost\r\n    port: 5672\r\n    username: guest\r\n    password: guest\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        metadata:\r\n          management:\r\n            ##配置元数据解决SpringBoot Admin无法正常监控问题\r\n            context-path: ${server.servlet.context-path}/actuator\r\n    function:\r\n      ##多个用;分隔\r\n      definition: seckillResult;seckillCanalResult\r\n    stream:\r\n      bindings:\r\n        ##配置消息绑定\r\n        seckill-out-0:\r\n          destination: seckill\r\n        seckillResult-in-0:\r\n          ##解决重复消费问题，注意：同一组下只消费一次\r\n          group: default\r\n          destination: seckill-result\r\n        seckillCanalResult-in-0:\r\n          ##解决重复消费问题，注意：同一组下只消费一次\r\n          group: default\r\n          destination: seckill-canal-result\r\n    sentinel:\r\n      transport:\r\n        port: 8719\r\n        ##默认端口8080，已改为自定义18088端口，通过http://127.0.0.1:18088/#/dashboard访问\r\n        dashboard: localhost:18088\r\n      ##使用nacos配置中心存储限流规则\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            data-id: ${spring.application.name}-flow-rules\r\n            data-type: json\r\n            group-id: DEFAULT_GROUP\r\n            rule-type: flow\r\n            server-addr: 127.0.0.1:8848\r\n\r\ndubbo:\r\n  protocol:\r\n    name: dubbo\r\n    port: -1\r\n  consumer:\r\n    timeout: 30000\r\n    check: false\r\n  application:\r\n    enable-file-cache: false\r\n  ## 此处有坑，如配置了具体的service名，对应的注入此service上的注解@DubboReference(check=false)会失效\r\n#  cloud:\r\n#    subscribed-services: \"goodskill-service-provider\"\r\n\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n  endpoint:\r\n    health:\r\n      show-details: always\r\n\r\ngoodskill:\r\n  loginUrl: ${goodskill.gateway.host}${server.servlet.context-path}/login\r\n  gateway:\r\n    host: http://www.goodskill.com:${server.port}\r\n\r\nserver:\r\n  port: 8080\r\n  servlet:\r\n    context-path: /goodskill/web\r\n    encoding:\r\n      charset: utf-8\r\n      enabled: true\r\n      force: true\r\n    register-default-servlet: true\r\n\r\n---\r\nspring:\r\n  config:\r\n    activate:\r\n      on-profile: docker,dev\r\n  redis:\r\n    host: redis\r\n    port: 6379\r\n    password: 123456\r\n  cloud:\r\n    nacos:\r\n      server-addr: nacos:8848\r\n    sentinel:\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            server-addr: nacos:8848\r\n  kafka:\r\n    bootstrap-servers: kafka:9092\r\n  rabbitmq:\r\n    host: rabbitmq\r\n    port: 5672\r\n    username: guest\r\n    password: guest\r\n  zipkin:\r\n    base-url: http://zipkin:9411/\r\ndubbo:\r\n  registry:\r\n    address: zookeeper://zookeeper:2181\r\n\r\n\r\n','fd1645b0612a0daee194b83b68faf3c1','2022-06-04 03:19:09','2022-06-04 03:19:09',NULL,'172.18.0.1','D',''),(4,11,'goodskill-web.yml','DEFAULT_GROUP','','spring:\r\n  profiles:\r\n    active: dev\r\n  application:\r\n    name: goodskill-web\r\n  #OAuth2.0第三方登录配置\r\n  security:\r\n    oauth2:\r\n      client:\r\n        registration:\r\n          gitee:\r\n            ##替换成你自己的App密钥\r\n            client-id: xxx\r\n            client-secret: xxx\r\n          github:\r\n            ##替换成你自己的App密钥\r\n            client-id: xxx\r\n            client-secret: xxx\r\n          ## 使用自定义的OAuth2.0授权登录服务\r\n          goodskill:\r\n            ##替换成你自己的App密钥\r\n            client-id: second-client\r\n            client-secret: noonewilleverguess\r\n  session:\r\n    redis:\r\n      flush-mode: on_save\r\n      namespace: spring:session\r\n    store-type: redis\r\n    timeout: 1800\r\n  main:\r\n    allow-bean-definition-overriding: true\r\n    allow-circular-references: true\r\n  mvc:\r\n    view:\r\n      prefix: /WEB-INF/jsp/\r\n      suffix: .jsp\r\n    # json格式请求前台到后台的格式转换\r\n    format:\r\n      date: yyyy-MM-dd HH:mm:ss\r\n      date-time: yyyy-MM-dd HH:mm:ss\r\n      time: HH:mm:ss\r\n    # 升级到springboot 2.6需要增加以下配置，否则springfox启动报错\r\n    pathmatch:\r\n      matching-strategy: ant_path_matcher\r\n  output:\r\n    ansi:\r\n      enabled: always\r\n  rabbitmq:\r\n    host: localhost\r\n    port: 5672\r\n    username: guest\r\n    password: guest\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        metadata:\r\n          management:\r\n            ##配置元数据解决SpringBoot Admin无法正常监控问题\r\n            context-path: ${server.servlet.context-path}/actuator\r\n    function:\r\n      ##多个用;分隔\r\n      definition: seckillResult;seckillCanalResult\r\n    stream:\r\n      bindings:\r\n        ##配置消息绑定\r\n        seckill-out-0:\r\n          destination: seckill\r\n        seckillResult-in-0:\r\n          ##解决重复消费问题，注意：同一组下只消费一次\r\n          group: default\r\n          destination: seckill-result\r\n        seckillCanalResult-in-0:\r\n          ##解决重复消费问题，注意：同一组下只消费一次\r\n          group: default\r\n          destination: seckill-canal-result\r\n    sentinel:\r\n      transport:\r\n        port: 8719\r\n        ##默认端口8080，已改为自定义18088端口，通过http://127.0.0.1:18088/#/dashboard访问\r\n        dashboard: localhost:18088\r\n      ##使用nacos配置中心存储限流规则\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            data-id: ${spring.application.name}-flow-rules\r\n            data-type: json\r\n            group-id: DEFAULT_GROUP\r\n            rule-type: flow\r\n            server-addr: 127.0.0.1:8848\r\n\r\ndubbo:\r\n  protocol:\r\n    name: dubbo\r\n    port: -1\r\n  consumer:\r\n    timeout: 30000\r\n    check: false\r\n  application:\r\n    enable-file-cache: false\r\n  ## 此处有坑，如配置了具体的service名，对应的注入此service上的注解@DubboReference(check=false)会失效\r\n#  cloud:\r\n#    subscribed-services: \"goodskill-service-provider\"\r\n\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n  endpoint:\r\n    health:\r\n      show-details: always\r\n\r\ngoodskill:\r\n  loginUrl: ${goodskill.gateway.host}${server.servlet.context-path}/login\r\n  gateway:\r\n    host: http://www.goodskill.com:${server.port}\r\n\r\nserver:\r\n  port: 8080\r\n  servlet:\r\n    context-path: /goodskill/web\r\n    encoding:\r\n      charset: utf-8\r\n      enabled: true\r\n      force: true\r\n    register-default-servlet: true\r\n\r\n---\r\nspring:\r\n  config:\r\n    activate:\r\n      on-profile: docker,dev\r\n  redis:\r\n    host: redis\r\n    port: 6379\r\n    password: 123456\r\n  cloud:\r\n    nacos:\r\n      server-addr: nacos:8848\r\n    sentinel:\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            server-addr: nacos:8848\r\n  kafka:\r\n    bootstrap-servers: kafka:9092\r\n  rabbitmq:\r\n    host: rabbitmq\r\n    port: 5672\r\n    username: guest\r\n    password: guest\r\n  zipkin:\r\n    base-url: http://zipkin:9411/\r\ndubbo:\r\n  registry:\r\n    address: zookeeper://zookeeper:2181\r\n\r\n\r\n','fd1645b0612a0daee194b83b68faf3c1','2022-06-04 03:19:09','2022-06-04 03:19:09',NULL,'172.18.0.1','D',''),(0,12,'goodskill-gateway-dev.yml','DEFAULT_GROUP','','server:\r\n  port: 9201\r\nspring:\r\n  cloud:\r\n    sentinel:\r\n      filter:\r\n        ## 网关服务此项需配置为false（若在网关流控控制台上看到了 URL 资源，就是此配置项没有置为 false）\r\n        enabled: false\r\n      transport:\r\n        port: 8719\r\n        ## 默认端口8080，已改为自定义18088端口，通过http://127.0.0.1:18088/#/dashboard访问\r\n        dashboard: localhost:18088\r\n      ##使用nacos配置中心存储限流规则\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            data-id: ${spring.application.name}-flow-rules\r\n#            data-type: json\r\n            group-id: DEFAULT_GROUP\r\n            rule-type: gw-flow\r\n            server-addr: 127.0.0.1:8848\r\n    gateway:\r\n      globalcors:\r\n        cors-configurations:\r\n          \'[/**]\':\r\n            allowCredentials: true\r\n            allowedOriginPatterns: \"*\"\r\n            allowedHeaders: \"*\"\r\n            allowedMethods: \"*\"\r\n      httpclient:\r\n        ssl:\r\n          useInsecureTrustManager: true\r\n      discovery:\r\n        locator:\r\n          enabled: true\r\n          lower-case-service-id: true\r\n      routes:\r\n        - id: oauth2-auth-server\r\n          uri: lb://oauth2-auth-server\r\n          predicates:\r\n            - Path=/oauth/**,/.well-known/jwks.json\r\n        - id: oauth2-resource-server\r\n          uri: lb://oauth2-resource-server\r\n          predicates:\r\n            - Path=/api/v5/user\r\n        - id: goodskill-admin\r\n          uri: lb://goodskill-admin\r\n          predicates:\r\n            - Path=/admin/**\r\n          filters:\r\n            - StripPrefix=1\r\n  main:\r\n    allow-bean-definition-overriding: true\r\nmanagement:\r\n  endpoint:\r\n    health:\r\n      show-details: always\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n\r\nnacos:\r\n  router:\r\n    data:\r\n      id: goodskill-gateway-routes\r\n\r\nsecurity:\r\n  ignore:\r\n    whiteUrl:\r\n      - \'/goodskill/web/auth/login\'\r\n      - \'/goodskill/web/auth/logout\'\r\n\r\n---\r\nspring:\r\n  config:\r\n    activate:\r\n      on-profile: docker,dev\r\n  zipkin:\r\n    base-url: http://zipkin:9411/\r\n  cloud:\r\n    nacos:\r\n      server-addr: nacos:8848\r\n    sentinel:\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            server-addr: nacos:8848\r\n\r\n\r\n','b3be5cc04bfc712694cf88296d572345','2022-06-04 03:20:54','2022-06-04 03:20:55',NULL,'172.18.0.1','I',''),(8,13,'goodskill-gateway-dev.yml','DEFAULT_GROUP','','server:\r\n  port: 9201\r\nspring:\r\n  cloud:\r\n    sentinel:\r\n      filter:\r\n        ## 网关服务此项需配置为false（若在网关流控控制台上看到了 URL 资源，就是此配置项没有置为 false）\r\n        enabled: false\r\n      transport:\r\n        port: 8719\r\n        ## 默认端口8080，已改为自定义18088端口，通过http://127.0.0.1:18088/#/dashboard访问\r\n        dashboard: localhost:18088\r\n      ##使用nacos配置中心存储限流规则\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            data-id: ${spring.application.name}-flow-rules\r\n#            data-type: json\r\n            group-id: DEFAULT_GROUP\r\n            rule-type: gw-flow\r\n            server-addr: 127.0.0.1:8848\r\n    gateway:\r\n      globalcors:\r\n        cors-configurations:\r\n          \'[/**]\':\r\n            allowCredentials: true\r\n            allowedOriginPatterns: \"*\"\r\n            allowedHeaders: \"*\"\r\n            allowedMethods: \"*\"\r\n      httpclient:\r\n        ssl:\r\n          useInsecureTrustManager: true\r\n      discovery:\r\n        locator:\r\n          enabled: true\r\n          lower-case-service-id: true\r\n      routes:\r\n        - id: oauth2-auth-server\r\n          uri: lb://oauth2-auth-server\r\n          predicates:\r\n            - Path=/oauth/**,/.well-known/jwks.json\r\n        - id: oauth2-resource-server\r\n          uri: lb://oauth2-resource-server\r\n          predicates:\r\n            - Path=/api/v5/user\r\n        - id: goodskill-admin\r\n          uri: lb://goodskill-admin\r\n          predicates:\r\n            - Path=/admin/**\r\n          filters:\r\n            - StripPrefix=1\r\n  main:\r\n    allow-bean-definition-overriding: true\r\nmanagement:\r\n  endpoint:\r\n    health:\r\n      show-details: always\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n\r\nnacos:\r\n  router:\r\n    data:\r\n      id: goodskill-gateway-routes\r\n\r\nsecurity:\r\n  ignore:\r\n    whiteUrl:\r\n      - \'/goodskill/web/auth/login\'\r\n      - \'/goodskill/web/auth/logout\'\r\n\r\n---\r\nspring:\r\n  config:\r\n    activate:\r\n      on-profile: docker,dev\r\n  zipkin:\r\n    base-url: http://zipkin:9411/\r\n  cloud:\r\n    nacos:\r\n      server-addr: nacos:8848\r\n    sentinel:\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            server-addr: nacos:8848\r\n\r\n\r\n','b3be5cc04bfc712694cf88296d572345','2022-06-04 03:26:48','2022-06-04 03:26:48','nacos','172.18.0.1','U',''),(0,14,'service.vgroupMapping.my_test_tx_group','SEATA_GROUP','','default','c21f969b5f03d33d43e04f8f136e7682','2022-06-04 03:27:39','2022-06-04 03:27:39',NULL,'172.18.0.1','I',''),(0,15,'store.mode','SEATA_GROUP','','file','8c7dd922ad47494fc02c388e12c00eac','2022-06-04 03:27:39','2022-06-04 03:27:39',NULL,'172.18.0.1','I',''),(0,16,'metrics.enabled','SEATA_GROUP','','true','b326b5062b2f0e69046810717534cb09','2022-06-04 03:27:39','2022-06-04 03:27:39',NULL,'172.18.0.1','I',''),(0,17,'metrics.registryType','SEATA_GROUP','','compact','7cf74ca49c304df8150205fc915cd465','2022-06-04 03:27:39','2022-06-04 03:27:39',NULL,'172.18.0.1','I',''),(0,18,'metrics.exporterList','SEATA_GROUP','','prometheus','e4f00638b8a10e6994e67af2f832d51c','2022-06-04 03:27:39','2022-06-04 03:27:39',NULL,'172.18.0.1','I',''),(0,19,'metrics.exporterPrometheusPort','SEATA_GROUP','','9898','7b9dc501afe4ee11c56a4831e20cee71','2022-06-04 03:27:39','2022-06-04 03:27:39',NULL,'172.18.0.1','I',''),(0,20,'client.rm.lock.retryPolicyBranchRollbackOnConflict','SEATA_GROUP','','false','68934a3e9455fa72420237eb05902327','2022-06-04 03:27:39','2022-06-04 03:27:39',NULL,'172.18.0.1','I',''),(0,21,'client.rm.lock.retryInterval','SEATA_GROUP','','1000','a9b7ba70783b617e9998dc4dd82eb3c5','2022-06-04 03:27:39','2022-06-04 03:27:39',NULL,'172.18.0.1','I',''),(0,22,'client.rm.lock.retryTimes','SEATA_GROUP','','30','34173cb38f07f89ddbebc2ac9128303f','2022-06-04 03:27:39','2022-06-04 03:27:39',NULL,'172.18.0.1','I',''),(0,23,'es-service-provider-dev.yml','DEFAULT_GROUP','','server:\r\n  port: 19093\r\n\r\nspring:\r\n  application:\r\n    name: es-service-provider\r\n  cloud:\r\n    sentinel:\r\n      transport:\r\n        port: 8719\r\n        ## 默认端口8080，已改为自定义18088端口，通过http://127.0.0.1:18088/#/dashboard访问\r\n        dashboard: localhost:18088\r\n      ##使用nacos配置中心存储限流规则\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            data-id: ${spring.application.name}-flow-rules\r\n            data-type: json\r\n            group-id: DEFAULT_GROUP\r\n            rule-type: flow\r\n            server-addr: 127.0.0.1:8848\r\n\r\n## 日志级别\r\nlogging:\r\n  level:\r\n    org:\r\n      elasticsearch:\r\n        client:\r\n          RestClient: debug\r\n## es客户端配置\r\nelasticsearch:\r\n  rest:\r\n    client:\r\n      address: localhost:9200\r\n\r\n## 是否开启openFeign sentinel支持，默认为false\r\nfeign:\r\n  sentinel:\r\n    enabled: true\r\n\r\nmanagement:\r\n  endpoint:\r\n    health:\r\n      show-details: always\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n\r\n---\r\nspring:\r\n  zipkin:\r\n    base-url: http://zipkin:9411/\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: nacos:8848\r\n    sentinel:\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            server-addr: nacos:8848\r\n  config:\r\n    activate:\r\n      on-profile: docker,dev\r\nelasticsearch:\r\n  rest:\r\n    client:\r\n      address: elasticsearch:9200\r\n\r\n','fc81eab9ef11152009ba6d79386de26d','2022-06-04 03:29:04','2022-06-04 03:29:05',NULL,'172.18.0.1','I',''),(0,24,'mongo-service-provider-dev.yml','DEFAULT_GROUP','','server:\r\n  port: 0\r\n  shutdown: graceful\r\nspring:\r\n  application:\r\n    name: mongo-service-provider\r\n  main:\r\n    allow-circular-references: true\r\n  cloud:\r\n    function:\r\n      ## 绑定的消息处理函数名\r\n      definition: seckillMongoSave\r\n    stream:\r\n      default-binder: rabbit\r\n      bindings:\r\n        seckillMongoSave-in-0:\r\n          ##解决重复消费问题，注意：同一组下只消费一次\r\n          group: default\r\n          destination: seckill-mongo-save\r\n    sentinel:\r\n      transport:\r\n        port: 8719\r\n        ## 默认端口8080，已改为自定义18088端口，通过http://127.0.0.1:18088/#/dashboard访问\r\n        dashboard: localhost:18088\r\n      ##使用nacos配置中心存储限流规则\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            data-id: ${spring.application.name}-flow-rules\r\n            data-type: json\r\n            group-id: DEFAULT_GROUP\r\n            rule-type: flow\r\n            server-addr: 127.0.0.1:8848\r\n\r\nlogging:\r\n  level:\r\n    org:\r\n      springframework:\r\n        data:\r\n          mongodb: debug\r\nmanagement:\r\n  endpoint:\r\n    shutdown:\r\n      enabled: true\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n\r\n---\r\nspring:\r\n  rabbitmq:\r\n    host: rabbitmq\r\n    port: 5672\r\n    username: guest\r\n    password: guest\r\n  zipkin:\r\n    base-url: http://zipkin:9411/\r\n  data:\r\n    mongodb:\r\n      database: test\r\n      uri: mongodb://mongo\r\n  cloud:\r\n    sentinel:\r\n      datasource:\r\n        ds0:\r\n          nacos:\r\n            server-addr: nacos:8848\r\n  config:\r\n    activate:\r\n      on-profile: docker,dev\r\n','a4ed5cbdc0aaf66bf83474cedb297248','2022-06-04 03:31:20','2022-06-04 03:31:20',NULL,'172.18.0.1','I',''),(6,25,'goodskill-service-provider-dev.yml','DEFAULT_GROUP','','server:\n  port: 0\n\nspring:\n  application:\n    name: goodskill-service-provider\n  kafka:\n    consumer:\n      group-id: seckill\n      ##ensures the new consumer group gets the messages we sent\n      auto-offset-reset: earliest\n  main:\n    allow-circular-references: true\n    allow-bean-definition-overriding: true\n  output:\n    ansi:\n      enabled: ALWAYS\n  data:\n    mongodb:\n      database: test\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://mysql:3306/seckill?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false\n    username: root\n    password: Password123\n  shardingsphere:\n    datasource:\n      names: ds0,ds1\n      ds0:\n        driver-class-name: com.mysql.cj.jdbc.Driver\n        type: com.zaxxer.hikari.HikariDataSource\n      ds1:\n        driver-class-name: com.mysql.cj.jdbc.Driver\n        type: com.zaxxer.hikari.HikariDataSource\n    sharding:\n      binding-tables: success_killed\n      tables:\n        success_killed:\n          actual-data-nodes: ds$->{0..1}.success_killed_$->{0..1}\n          database-strategy:\n            inline:\n              algorithm-expression: ds$->{seckill_id % 2}\n              sharding-column: seckill_id\n          table-strategy:\n            inline:\n              algorithm-expression: success_killed_$->{user_phone.toLong() % 2}\n              sharding-column: user_phone\n      #必须配置，否则未配置的表会被应用分库分表规则\n      default-data-source-name: ds0\n    props:\n      sql:\n        show: false\n  rabbitmq:\n    port: 5672\n    username: guest\n    password: guest\n  cloud:\n    function:\n      definition: seckill\n    stream:\n      bindings:\n        seckilResult-out-0:\n          destination: seckill-result\n        seckill-in-0:\n          ##解决重复消费问题，注意：同一组下只消费一次\n          group: default\n          destination: seckill\n        seckillMongoSave-out-0:\n          destination: seckill-mongo-save\n      default-binder: rabbit\n    sentinel:\n      transport:\n        port: 8719\n        ## 默认端口8080，已改为自定义18088端口，通过http://127.0.0.1:18088/#/dashboard访问\n        dashboard: localhost:18088\n      ##使用nacos配置中心存储限流规则\n      datasource:\n        ds0:\n          nacos:\n            data-id: ${spring.application.name}-flow-rules\n            data-type: json\n            group-id: DEFAULT_GROUP\n            rule-type: flow\n            server-addr: 127.0.0.1:8848\ndubbo:\n  scan:\n    base-packages: com.goodskill.service.impl\n  protocol:\n    name: dubbo\n    ### 服务暴露端口\n    port: -1\n    status: server\n  registry:\n    address: zookeeper://zookeeper:2181\n    timeout: 30000\n    id: my-registry\n  provider:\n    timeout: 60000\n  application:\n    enable-file-cache: false\n    ##开启应用级地址注册\n    register-mode: instance\n  ## 此处有坑，如配置了具体的service名，对应的注入此service上的注解@DubboReference(check=false)会失效\n#  cloud:\n#    subscribed-services: \"\"\n\nmybatis:\n  mapper-locations: classpath:mapper/*.xml\n\nseata:\n  enabled: false\n  #1.4.2使用此配置禁用seata\n  enable-auto-data-source-proxy: false\n  application-id: goodskill-service-provider\n  tx-service-group: my_test_tx_group\n  config:\n    type: nacos\n    nacos:\n      namespace:\n      serverAddr: nacos:8848\n      group: SEATA_GROUP\n      username: \"nacos\"\n      password: \"nacos\"\n  registry:\n    type: nacos\n    nacos:\n      application: seata-server\n      server-addr: nacos:8848\n      group: SEATA_GROUP\n      namespace:\n      username: \"nacos\"\n      password: \"nacos\"\n\nlogging:\n  level:\n    org:\n      apache:\n        kafka: error\nmanagement:\n  endpoint:\n    health:\n      show-details: always\n  endpoints:\n    web:\n      exposure:\n        include: \'*\'\n  health:\n    db:\n      enabled: false\n---\n######################docker环境配置#####################\nspring:\n  redis:\n    host: redis\n    port: 6379\n    password: 123456\n  ##下面是redis哨兵模式的配置信息\n#    redisson:\n#      config: |\n#        sentinelServersConfig:\n#          checkSentinelsList: false\n#          masterName: mymaster\n#          sentinelAddresses:\n#          - \"redis://127.0.0.1:26379\"\n#          - \"redis://127.0.0.1:26380\"\n#          - \"redis://127.0.0.1:26381\"\n#    sentinel:\n#      master: mymaster\n#      nodes: 127.0.0.1:26379,127.0.0.1:26380,127.0.0.1:26381\n  kafka:\n    bootstrap-servers: kafka:9092\n  shardingsphere:\n    datasource:\n      ds0:\n        password: Password123\n        jdbcUrl: jdbc:mysql://mysql:3306/seckill?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false\n        username: root\n      ds1:\n        password: Password123\n        jdbcUrl: jdbc:mysql://mysql:3306/seckill_01?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false\n        username: root\n  cloud:\n    nacos:\n      server-addr: nacos:8848\n    sentinel:\n      datasource:\n        ds0:\n          nacos:\n            server-addr: nacos:8848\n  zipkin:\n    base-url: http://zipkin:9411/\n  rabbitmq:\n    host: rabbitmq\n    port: 5672\n    username: guest\n    password: guest\n  config:\n    activate:\n      on-profile: docker,dev\ndubbo:\n  registry:\n    address: zookeeper://zookeeper:2181\n  provider:\n    timeout: 30000\n\nzookeeper_ip: zookeeper:2181\n\n\n\n\n','f6074f05dd14f778c3ee4a53f8a7d8ba','2022-06-04 03:41:25','2022-06-04 03:41:26','nacos','172.18.0.1','U','');
/*!40000 ALTER TABLE `his_config_info` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `permissions`
--

DROP TABLE IF EXISTS `permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `permissions` (
  `role` varchar(50) NOT NULL,
  `resource` varchar(255) NOT NULL,
  `action` varchar(8) NOT NULL,
  UNIQUE KEY `uk_role_permission` (`role`,`resource`,`action`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `permissions`
--

LOCK TABLES `permissions` WRITE;
/*!40000 ALTER TABLE `permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `roles`
--

DROP TABLE IF EXISTS `roles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `roles` (
  `username` varchar(50) NOT NULL,
  `role` varchar(50) NOT NULL,
  UNIQUE KEY `idx_user_role` (`username`,`role`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `roles`
--

LOCK TABLES `roles` WRITE;
/*!40000 ALTER TABLE `roles` DISABLE KEYS */;
INSERT INTO `roles` VALUES ('nacos','ROLE_ADMIN');
/*!40000 ALTER TABLE `roles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tenant_capacity`
--

DROP TABLE IF EXISTS `tenant_capacity`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tenant_capacity` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `tenant_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT 'Tenant ID',
  `quota` int unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',
  `usage` int unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
  `max_size` int unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数',
  `max_aggr_size` int unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='租户容量信息表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tenant_capacity`
--

LOCK TABLES `tenant_capacity` WRITE;
/*!40000 ALTER TABLE `tenant_capacity` DISABLE KEYS */;
/*!40000 ALTER TABLE `tenant_capacity` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tenant_info`
--

DROP TABLE IF EXISTS `tenant_info`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tenant_info` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `kp` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8_bin NOT NULL COMMENT 'kp',
  `tenant_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_id',
  `tenant_name` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_name',
  `tenant_desc` varchar(256) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT NULL COMMENT 'tenant_desc',
  `create_source` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8_bin DEFAULT NULL COMMENT 'create_source',
  `gmt_create` bigint NOT NULL COMMENT '创建时间',
  `gmt_modified` bigint NOT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),
  KEY `idx_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='tenant_info';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tenant_info`
--

LOCK TABLES `tenant_info` WRITE;
/*!40000 ALTER TABLE `tenant_info` DISABLE KEYS */;
/*!40000 ALTER TABLE `tenant_info` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `users` (
  `username` varchar(50) NOT NULL,
  `password` varchar(500) NOT NULL,
  `enabled` tinyint(1) NOT NULL,
  PRIMARY KEY (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES ('nacos','$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu',1);
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-06-07 22:21:02
